with open(file_name, 'rt') as inputfile:
    for line in inputfile:

        if counter >= 5:
            print('350 items')
            # counterImport += 1
            dfRev = pd.DataFrame(revMetadata)

            revision_processed = list(filter(None, revision_processed))
            revision_processed_clean = list(itertools.chain.from_iterable(revision_processed))
            qualifier_all = [x[2] for x in revision_processed_clean]
            # revision_processed_clean = list(zip(*revision_processed_clean))
            revisionStore = revisionStore + revMetadata

            try:
                # print(statement_all)

                # statement_all = list(itertools.chain.from_iterable(revision_processed_clean[0]))
                # statement_all = list(itertools.chain.from_iterable(statement_all))
                # statement_all = list(filter(None, statement_all))
                #`


                # statement_all = list(filter(None, revision_processed_clean[0]))
                statement_all = [x[0] for x in revision_processed_clean]
                statement_all = list(filter(None, statement_all))
                revisionDf = pd.DataFrame(statement_all)
                revisionDf.statementId = revisionDf['statementId'].astype('category')
                revisionDf.revId = revisionDf['revId'].astype('int')
                revisionDf.itemId = revisionDf['itemId'].astype('category')
                uniStats = get_max_rows(revisionDf)
                dicto = uniStats.to_dict('records')

                delStats = revisionDf.groupby('statementId').apply(getDeleted, dfRev)
                delStats = list(filter(None, list(delStats)))
                for x in delStats:
                    x['revId'] = int(x['revId'])
                statement_all = dicto + delStats
                statementStore = statementStore + statement_all
                print('new statement df')
                    # break

                references_all = [x[1] for x in revision_processed_clean]
                # references_all = list(filter(None, revision_processed_clean[1]))
                references_all = list(filter(None, references_all))
                references_all = list(itertools.chain.from_iterable(references_all))
                # print(references_all)
                revisionDf = pd.DataFrame(references_all)
                revisionDf.referenceId = revisionDf['referenceId'].astype('category')
                revisionDf.revId = revisionDf['revId'].astype('int')
                uniStats = get_max_rowsRef(revisionDf)
                dicto = uniStats.to_dict('records')

                delStats = revisionDf.groupby('referenceId').apply(getDeletedRef, dfRev)
                delStats = list(filter(None, list(delStats)))
                for x in delStats:
                    x['revId'] = int(x['revId'])
                references_all = dicto + delStats
                print('new statement df refs')
                referenceStore = referenceStore + references_all


                    # break
                if any(v is not None for v in qualifier_all):  # revision_processed_clean[2].count(None) == len(revision_processed_clean[2]):
                #     pass
                # else:

                    qualifier_all = list(filter(None, qualifier_all))
                    qualifier_all = list(itertools.chain.from_iterable(qualifier_all))
                    revisionDf = pd.DataFrame(qualifier_all)
                    revisionDf.qualId = revisionDf['qualId'].astype('category')
                    revisionDf.revId = revisionDf['revId'].astype('int')
                    uniStats = get_max_rowsQual(revisionDf)
                    dicto = uniStats.to_dict('records')

                    delStats = revisionDf.groupby('qualId').apply(getDeletedQual, dfRev)
                    delStats = list(filter(None, list(delStats)))
                    for x in delStats:
                        x['revId'] = int(x['revId'])
                    qualifier_all = dicto + delStats
                    print('new statement df quals')
                    qualifierStore = qualifierStore + qualifier_all



                        # print(qualifier_all)

            except IndexError as ie:
                print(ie, revision_processed_clean)
            #     # break

            revision_processed = []
            revision_processed_clean =[]
            revMetadata = []
            statement_all = []
            dicto =[]
            uniStats = []
            references_all = []
            qualifier_all = []
            new_counter += counter
            procCounter += 1
            counter = 0
            dfRev = pd.DataFrame()
            # break

        # if procCounter == 40:
        #
        #     conn = get_db_params()
        #     cur = conn.cursor()
        #     try:
        #         cur.executemany(
        #             """INSERT INTO revisionData_201710 (itemId, parId, revId, timeStamp, userName) VALUES (%(itemId)s, %(parId)s, %(revId)s, %(timeStamp)s, %(userName)s);""",
        #             revisionStore)
        #         conn.commit()
        #         # print('imported')
        #     except:
        #         conn.rollback()
        #         for stat in revisionStore:
        #             try:
        #                 cur.execute(
        #                     """INSERT INTO revisionData_201710 (itemId, parId, revId, timeStamp, userName) VALUES (%(itemId)s, %(parId)s, %(revId)s, %(timeStamp)s, %(userName)s);""",
        #                     stat)
        #                 conn.commit()
        #             except:
        #                 conn.rollback()
        #                 e = sys.exc_info()[0]
        #                 print("<p>Error: %s</p>" % e)
        #                 print('not imported, revision id error')
        #                 print(stat)
        #
        #     try:
        #         # conn = get_db_params()
        #         # cur = conn.cursor()
        #         cur.executemany(
        #             """INSERT INTO statementsData_201710 (itemId, revId, statementId, statProperty, statRank, statType, statValue) VALUES (%(itemId)s, %(revId)s, %(statementId)s, %(statProperty)s, %(statRank)s, %(statType)s, %(statValue)s);""",
        #             statementStore)
        #         conn.commit()
        #         # print('imported')
        #     except:
        #         conn.rollback()
        #         for stat in statementStore:
        #             try:
        #                 cur.execute(
        #                     """INSERT INTO statementsData_201710 (itemId, revId, statementId, statProperty, statRank, statType, statValue) VALUES (%(itemId)s, %(revId)s, %(statementId)s, %(statProperty)s, %(statRank)s, %(statType)s, %(statValue)s);""",
        #                     stat)
        #                 # print(stat)
        #                 conn.commit()
        #             except:
        #                 conn.rollback()
        #                 # e = sys.exc_info()[0]
        #                 # print("<p>Error: %s</p>" % e)
        #                 # print('not imported')
        #                 # print(stat)
        #                 logger.exception(stat)
        #
        #     try:
        #
        #         cur.executemany(
        #             """INSERT INTO referenceData_201710 (referenceId, refProperty, refType, refValue, revId, statementId) VALUES (%(referenceId)s, %(refProperty)s, %(refType)s, %(refValue)s, %(revId)s, %(statementId)s);""",
        #             referenceStore)
        #         conn.commit()
        #         # print('references imported')
        #     except:
        #         conn.rollback()
        #         for ref in referenceStore:
        #             try:
        #                 cur.execute(
        #                     """INSERT INTO referenceData_201710 (referenceId, refProperty, refType, refValue, revId, statementId) VALUES (%(referenceId)s, %(refProperty)s, %(refType)s, %(refValue)s, %(revId)s, %(statementId)s);""",
        #                     ref)
        #                 conn.commit()
        #             except:
        #                 conn.rollback()
        #                 e = sys.exc_info()[0]
        #                 print("<p>Error: %s</p>" % e)
        #                 print('not imported')
        #                 print(ref)
        #                 # break
        #
        #     try:
        #         cur.executemany(
        #             """INSERT INTO qualifierData_201710 (qualifierId, qualProperty, qualType, qualValue, revId, statementId) VALUES (%(qualId)s, %(qualProperty)s, %(qualType)s, %(qualValue)s, %(revId)s, %(statementId)s);""",
        #             qualifierStore)
        #         conn.commit()
        #         # print('qualifiers imported')
        #     except:
        #         conn.rollback()
        #         for qual in qualifierStore:
        #             try:
        #                 cur.execute(
        #                     """INSERT INTO qualifierData_201710 (qualifierId, qualProperty, qualType, qualValue, revId, statementId) VALUES (%(qualId)s, %(qualProperty)s, %(qualType)s, %(qualValue)s, %(revId)s, %(statementId)s);""",
        #                     qual)
        #                 conn.commit()
        #             except:
        #                 conn.rollback()
        #                 e = sys.exc_info()[0]
        #                 print("<p>Error: %s</p>" % e)
        #                 print('not imported')
        #                 print(qual)
        #                 # break
        #
        #     revisionStore = []
        #     statementStore = []
        #     referenceStore =[]
        #     qualifierStore = []
        #     procCounter = 0
        #     print(new_counter, ' statements imported!')

        if '<title>' in line:

            itemId = line
            itemId = itemId.lstrip()
            itemId = itemId.replace('<title>', '')
            itemId = itemId.replace('</title>', '')
            itemId = itemId.rstrip()
            itemId = itemId.replace('Property:', '')
            if re.match('[PQ][0-9]{1,}', itemId):
                counter += 1
                record = True
                itemSaved = itemId

        if '<revision>' in line and record:
            revi = True

        if ('<id>' in line and revi is True) and record:
            revId = line
            revId = revId.lstrip()
            revId = revId.replace('<id>', '')
            revId = revId.replace('</id>', '')
            revId = revId.rstrip()
            revDict['revId'] = revId
            revId = None
            revi = False

        if '<parentid>' in line and record:
            parId = line
            parId = parId.lstrip()
            parId = parId.replace('<parentid>', '')
            parId = parId.replace('</parentid>', '')
            parId = parId.rstrip()
            revDict['parId'] = parId
            parId = None

        if '<timestamp>' in line and record:
            timeStamp = line.replace('\t', '')
            timeStamp = timeStamp.replace('\n', '')
            timeStamp = timeStamp.replace('T', ' ')
            timeStamp = timeStamp.replace('Z', '')
            timeStamp = re.sub(r'<timestamp>|</timestamp>', '', timeStamp)
            timeStamp = timeStamp.lstrip()
            timeStamp = timeStamp.rstrip()
            revDict['timeStamp'] = timeStamp
            timeStamp = None

        if '<username>' in line and record:
            userName = line
            userName = userName.lstrip()
            userName = re.sub(r'<username>|</username>', '', userName)
            userName = userName.rstrip()
            revDict['userName'] = userName
            userName = None

            revDict['itemId'] = itemSaved
            if 'parId' not in revDict.keys():
                revDict['parId'] = 'None'
            revMetadata.append(revDict)

        elif '<ip>' in line and record:
            userName = line
            userName = userName.lstrip()
            userName = re.sub(r'<ip>|</ip>', '', userName)
            revDict['userName'] = userName
            userName = None

            revDict['itemId'] = itemSaved
            if 'parId' not in revDict.keys():
                revDict['parId'] = 'None'
            revMetadata.append(revDict)


        if '<text xml:space="preserve">' in line and record:

            parsed_line = h_parser(line)
            try:
                parsed_json = ujson.loads(parsed_line)
                print(parsed_json)

                rev_process = extr_rev_data(parsed_json, revDict['revId'])
                revision_processed.append(rev_process)

            except ValueError as e:
                # print(e)
                # print(parsed_line)
                # revDict = {}
                pass
            except KeyError:
                print(revDict)
            finally:
                revDict = {}

        if '</page>' in line:
            record = False


        # counter += 1
        # if counterImport == 3:
        #     cleanDuplicates()
        #     print('Duplicated cleaned')
        #     counterImport = 0

        # continue


    revision_processed = list(filter(None, revision_processed))
    revision_processed_clean = list(itertools.chain.from_iterable(revision_processed))
    # revision_processed_clean = list(zip(*revision_processed_clean))
    qualifier_all = [x[2] for x in revision_processed_clean]

    dfRev = pd.DataFrame(revMetadata)

    try:
        # print(statement_all)

        # statement_all = list(itertools.chain.from_iterable(revision_processed_clean[0]))
        # statement_all = list(itertools.chain.from_iterable(statement_all))
        # statement_all = list(filter(None, statement_all))
        #
        conn = get_db_params()
        cur = conn.cursor()
        try:
            cur.executemany(
                """INSERT INTO revisionData_201710 (itemId, parId, revId, timeStamp, userName) VALUES (%(itemId)s, %(parId)s, %(revId)s, %(timeStamp)s, %(userName)s);""",
                revMetadata)
            conn.commit()
            # print('imported')
        except:
            conn.rollback()
            for stat in revMetadata:
                try:
                    cur.execute(
                        """INSERT INTO revisionData_201710 (itemId, parId, revId, timeStamp, userName) VALUES (%(itemId)s, %(parId)s, %(revId)s, %(timeStamp)s, %(userName)s);""",
                        stat)
                    conn.commit()
                except:
                    conn.rollback()
                    e = sys.exc_info()[0]
                    print("<p>Error: %s</p>" % e)
                    print('not imported, revision id error')
                    print(stat)


        # statement_all = list(filter(None, revision_processed_clean[0]))
        statement_all = [x[0] for x in revision_processed_clean]
        statement_all = list(filter(None, statement_all))
        revisionDf = pd.DataFrame(statement_all)
        revisionDf.statementId = revisionDf['statementId'].astype('category')
        revisionDf.revId = revisionDf['revId'].astype('int')
        revisionDf.itemId = revisionDf['itemId'].astype('category')
        uniStats = get_max_rows(revisionDf)
        dicto = uniStats.to_dict('records')
        print('duplicates removed')

        delStats = revisionDf.groupby('statementId').apply(getDeleted, dfRev)
        delStats = list(filter(None, list(delStats)))
        for x in delStats:
            x['revId'] = int(x['revId'])
        print('deleted statements added')
        statement_all = dicto + delStats
        print('new statement df')
        conn = get_db_params()
        cur = conn.cursor()


        try:

            cur.executemany(
                """INSERT INTO statementsData_201710 (itemId, revId, statementId, statProperty, statRank, statType, statValue) VALUES (%(itemId)s, %(revId)s, %(statementId)s, %(statProperty)s, %(statRank)s, %(statType)s, %(statValue)s);""",
                statement_all)
            conn.commit()
            print('imported')
        except:
            conn.rollback()
            for stat in statement_all:
                try:
                    cur.execute(
                        """INSERT INTO statementsData_201710 (itemId, revId, statementId, statProperty, statRank, statType, statValue) VALUES (%(itemId)s, %(revId)s, %(statementId)s, %(statProperty)s, %(statRank)s, %(statType)s, %(statValue)s);""",
                        stat)
                    conn.commit()
                except:
                    conn.rollback()
                    e = sys.exc_info()[0]
                    print("<p>Error: %s</p>" % e)
                    print('not imported')
                    logging.exception(stat)
                    #print(stat)
                    # break

        references_all = [x[1] for x in revision_processed_clean]
        # references_all = list(filter(None, revision_processed_clean[1]))
        references_all = list(filter(None, references_all))
        references_all = list(itertools.chain.from_iterable(references_all))
        # print(references_all)
        revisionDf = pd.DataFrame(references_all)
        revisionDf.referenceId = revisionDf['referenceId'].astype('category')
        revisionDf.revId = revisionDf['revId'].astype('int')
        uniStats = get_max_rowsRef(revisionDf)
        dicto = uniStats.to_dict('records')
        print('duplicates removed ref')

        delStats = revisionDf.groupby('referenceId').apply(getDeletedRef, dfRev)
        delStats = list(filter(None, list(delStats)))
        for x in delStats:
            x['revId'] = int(x['revId'])
        print('deleted refs added')
        references_all = dicto + delStats
        print('new statement df refs')

        try:
            cur.executemany(
                """INSERT INTO referenceData_201710 (referenceId, refProperty, refType, refValue, revId, statementId) VALUES (%(referenceId)s, %(refProperty)s, %(refType)s, %(refValue)s, %(revId)s, %(statementId)s);""",
                references_all)
            conn.commit()
            print('imported')
        except:
            conn.rollback()
            for ref in references_all:
                try:
                    cur.execute(
                        """INSERT INTO referenceData_201710 (referenceId, refProperty, refType, refValue, revId, statementId) VALUES (%(referenceId)s, %(refProperty)s, %(refType)s, %(refValue)s, %(revId)s, %(statementId)s);""",
                        ref)
                    conn.commit()
                except:
                    conn.rollback()
                    e = sys.exc_info()[0]
                    print("<p>Error: %s</p>" % e)
                    print('not imported')
                    print(ref)
                    # break

        if any(v is None for v in qualifier_all):  # revision_processed_clean[2].count(None) == len(revision_processed_clean[2]):
            pass
        else:
            # qualifier_all = list(filter(None, revision_processed_clean[2]))
            # qualifier_all = list(itertools.chain.from_iterable(qualifier_all))
            # qualifier_all = list(filter(None, revision_processed_clean[2]))
            # qualifier_all = list(itertools.chain.from_iterable(qualifier_all))
            qualifier_all = list(filter(None, qualifier_all))
            qualifier_all = list(itertools.chain.from_iterable(qualifier_all))
            revisionDf = pd.DataFrame(qualifier_all)
            revisionDf.qualId = revisionDf['qualId'].astype('category')
            revisionDf.revId = revisionDf['revId'].astype('int')
            uniStats = get_max_rowsQual(revisionDf)
            dicto = uniStats.to_dict('records')
            print('duplicates removed qual')

            delStats = revisionDf.groupby('qualId').apply(getDeletedQual, dfRev)
            delStats = list(filter(None, list(delStats)))
            for x in delStats:
                x['revId'] = int(x['revId'])
            print('deleted quals added')
            qualifier_all = dicto + delStats
            print('new statement df quals')

            try:
                cur.executemany(
                    """INSERT INTO qualifierData_201710 (qualifierId, qualProperty, qualType, qualValue, revId, statementId) VALUES (%(qualId)s, %(qualProperty)s, %(qualType)s, %(qualValue)s, %(revId)s, %(statementId)s);""",
                    qualifier_all)
                conn.commit()
                print('imported')
            except:
                conn.rollback()
                for qual in qualifier_all:
                    try:
                        cur.execute(
                            """INSERT INTO qualifierData_201710 (qualifierId, qualProperty, qualType, qualValue, revId, statementId) VALUES (%(qualId)s, %(qualProperty)s, %(qualType)s, %(qualValue)s, %(revId)s, %(statementId)s);""",
                            qual)
                        conn.commit()
                    except:
                        conn.rollback()
                        e = sys.exc_info()[0]
                        print("<p>Error: %s</p>" % e)
                        print('not imported')
                        print(qual)
                        # break
                #     return revision_processed


    except IndexError as ie:
        print(ie, revision_processed_clean)
        # break

    revision_processed = []
    counter = 0
    print('done!')
        # break